{"mappings":"AAAA,aAIA,MAAMA,QACJC,KAAO,IAAIC,KACXC,IAAMD,KAAKE,MAAQ,IAAIC,OAAM,IAE7BC,YAAYC,EAAQC,EAAUC,GAC5BC,KAAKH,OAASA,EACdG,KAAKF,SAAWA,EAChBE,KAAKD,SAAWA,CAClB,CACAE,kBAEED,KAAKE,YAAc,GAAGF,KAAKG,KAAK,GAAGC,gBAAgBJ,KAAKG,KAAKR,MAAM,SADpD,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC3CK,KAAKT,KAAKc,eAAeL,KAAKT,KAAKe,WACxH,EAOF,MAAMC,gBAAgBjB,QACpBa,KAAO,UACPP,YAAYC,EAAQC,EAAUC,EAAUS,GACtCC,MAAMZ,EAAQC,EAAUC,GACxBC,KAAKQ,QAAUA,EACfR,KAAKU,WACLV,KAAKC,iBACP,CAEAS,WAGE,OADAV,KAAKW,KAAOX,KAAKD,SAAWC,KAAKF,SAC1BE,KAAKW,IACd,EAGF,MAAMC,gBAAgBtB,QACpBa,KAAO,UACPP,YAAYC,EAAQC,EAAUC,EAAUc,GACtCJ,MAAMZ,EAAQC,EAAUC,GACxBC,KAAKa,cAAgBA,EACrBb,KAAKc,YACLd,KAAKC,iBACP,CACAa,YAGE,OADAd,KAAKe,MAAQf,KAAKF,UAAYE,KAAKD,SAAW,IACvCC,KAAKe,KACd,EAOF,MAAMC,KAAOC,SAASC,cAAc,SAC9BC,kBAAoBF,SAASC,cAAc,aAC3CE,UAAYH,SAASC,cAAc,sBACnCG,cAAgBJ,SAASC,cAAc,0BACvCI,cAAgBL,SAASC,cAAc,0BACvCK,aAAeN,SAASC,cAAc,yBACtCM,eAAiBP,SAASC,cAAc,2BAE9C,MAAMO,IACJC,GACAC,GAAgB,GAChBC,GACAC,GAAY,GAEZjC,cAEEI,KAAK8B,eAGL9B,KAAK+B,mBAGLf,KAAKgB,iBAAiB,SAAUhC,KAAKiC,YAAYC,KAAKlC,OACtDoB,UAAUY,iBAAiB,SAAUhC,KAAKmC,uBAC1ChB,kBAAkBa,iBAAiB,QAAShC,KAAKoC,aAAaF,KAAKlC,MACrE,CAEA8B,eACMO,UAAUC,aACZD,UAAUC,YAAYC,mBACpBvC,KAAKwC,SAASN,KAAKlC,OACnB,WACEyC,MAAM,8BACR,GAEN,CAEAD,SAASE,GACP,MAAMC,SAAEA,GAAaD,EAAS7C,QACxB+C,UAAEA,GAAcF,EAAS7C,OAC/BgD,QAAQC,IAAI,+BAA+BH,KAAYC,MACvD,MAAM/C,EAAS,CAAC8C,EAAUC,GAE1B5C,MAAK0B,EAAOqB,EAAErB,IAAI,OAAOsB,QAAQnD,EAAQG,MAAK2B,GAE9CoB,EAAEE,UAAU,iDAAkD,CAC5DC,YACE,4FACDC,MAAMnD,MAAK0B,GAEd1B,MAAK0B,EAAK0B,GAAG,QAASpD,KAAKqD,UAAUnB,KAAKlC,OAE1CA,MAAK6B,EAAUyB,SAAQC,IACrBvD,KAAKwD,qBAAqBD,EAAA,GAE9B,CAEAF,UAAUI,GAENzD,MAAK4B,EAAY6B,EACjBzC,KAAK0C,UAAUC,OAAO,UACtBtC,cAAcuC,OAElB,CAEAC,YAEExC,cAAcyC,MACZvC,aAAauC,MACbxC,cAAcwC,MACdtC,eAAesC,MACb,GACJ9C,KAAK+C,MAAMC,QAAU,OACrBhD,KAAK0C,UAAUO,IAAI,UACnBC,YAAW,IAAOlD,KAAK+C,MAAMC,QAAU,QAAS,IAClD,CAEA7B,wBACEX,eAAe2C,QAAQ,cAAcT,UAAUU,OAAO,qBACtD7C,aAAa4C,QAAQ,cAAcT,UAAUU,OAAO,oBACtD,CAEAnC,YAAYoC,GACV,MAEMC,EAAc,IAAIC,IAAWA,EAAOC,OAAMC,GAAOA,EAAM,IAE7DJ,EAAEK,iBAEF,MAAMvE,EAAOiB,UAAU0C,MACjBhE,GAAYuB,cAAcyC,MAC1B/D,GAAYuB,cAAcwC,OAC1Ba,IAAEA,EAAGC,IAAEA,GAAQ5E,MAAK4B,EAAUiD,OACpC,IAAIC,EAIJ,GAAa,YAAT3E,EAAoB,CACtB,MAAMK,GAAWe,aAAauC,MAC9B,IAhBiB,KAAIS,IAAWA,EAAOC,OAAMC,GAAOM,OAAOC,SAASP,KAoBjEQ,CAAWnF,EAAUC,EAAUS,KAC/B8D,EAAYxE,EAAUC,EAAUS,GAEjC,OAAOiC,MAAM,sCACfqC,EAAU,IAAIvE,QAAQ,CAACoE,EAAKC,GAAM9E,EAAUC,EAAUS,EACxD,CAGA,GAAa,YAATL,EAAoB,CACtB,MAAM+E,GAAa1D,eAAesC,MAClC,IACGiB,OAAOC,SAASlF,EAAUC,EAAUmF,KACpCZ,EAAYxE,EAAUC,GAEvB,OAAO0C,MAAM,sCAEfqC,EAAU,IAAIlE,QAAQ,CAAC+D,EAAKC,GAAM9E,EAAUC,EAAUmF,EACxD,CAEAlF,MAAK6B,EAAUsD,KAAKL,GAIpB9E,KAAKwD,qBAAqBsB,GAE1B9E,KAAKoF,eAAeN,GAGpB9E,KAAK6D,YAGL7D,KAAKqF,kBACP,CAEA7B,qBAAqBsB,GACnB/B,EAAEuC,OAAOR,EAAQjF,QACdsD,MAAMnD,MAAK0B,GACX6D,UACCxC,EAAEyC,MAAM,CACNC,SAAU,IACVC,SAAU,IACVC,WAAW,EACXC,cAAc,EACdC,UAAW,GAAGf,EAAQ3E,gBAGzB2F,gBACC,GAAoB,YAAjBhB,EAAQ3E,KAAqB,QAAU,QAAQ2E,EAAQ5E,eAE3D6F,WACL,CACAX,eAAeN,GACb,IAAIkB,EAAO,qCACmBlB,EAAQ3E,kBAAkB2E,EAAQrF,wCACnCqF,EAAQ5E,2FAGhB,YAAjB4E,EAAQ3E,KAAqB,QAAU,mDAEV2E,EAAQhF,mQASpB,YAAjBgF,EAAQ3E,OACV6F,GAAQ,mIAGuBlB,EAAQnE,KAAKsF,QAAQ,iMAKrBnB,EAAQtE,uFAMpB,YAAjBsE,EAAQ3E,OACV6F,GAAQ,+HAGyBlB,EAAQ/D,MAAMkF,QAAQ,sMAKtBnB,EAAQjE,sGAO3CG,KAAKkF,mBAAmB,WAAYF,EACtC,CAEA5D,aAAaiC,GACX,MAAM8B,EAAY9B,EAAE+B,OAAOjC,QAAQ,YAGnC,GAFAtB,QAAQC,IAAIqD,IAEPA,EAAW,OAEhB,MAAMrB,EAAU9E,MAAK6B,EAAUwE,MAC7B9C,GAAQA,EAAK9D,KAAO0G,EAAUG,QAAQ7G,KAGxCO,MAAK0B,EAAKsB,QAAQ8B,EAAQjF,OAAQG,MAAK2B,EAAe,CACpD4E,SAAS,EACTC,IAAK,CAAEzG,SAAU,IAIrB,CAEAsF,mBACEoB,aAAaC,QAAQ,WAAYC,KAAKC,UAAU5G,MAAK6B,GACvD,CAEAE,mBACE,MAAM8E,EAAOF,KAAKG,MAAML,aAAaM,QAAQ,aAGxCF,IAEL7G,MAAK6B,EAAYgF,EACjB7G,MAAK6B,EAAUyB,SAAQC,IACrBvD,KAAKoF,eAAe7B,EAAA,IAGxB,CAEAyD,QACEP,aAAaQ,WAAW,YACxBC,SAASC,QACX,EAGF,MAAMC,IAAM,IAAI3F","sources":["script.js"],"sourcesContent":["'use strict';\n\n// prettier-ignore\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  // clicks= 0;\n  constructor(coords, distance, duration) {\n    this.coords = coords;\n    this.distance = distance; //in km\n    this.duration = duration; // in min\n  }\n  _setDescription(){\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`\n  }\n\n  // click(){\n  //   this.clicks++;\n  // }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    //min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n  calcSpeed() {\n    //km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([50, 4], 5, 24, 100);\n// const cycling1 = new Cycling([50, 4], 27, 95, 520);\n// console.log(run1, cycling1);\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    //Get user's position\n    this._getPosition();\n\n    //Get data from local storage\n    this._getLocalStorage();\n\n    //Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    console.log(`https://www.google.be/maps/@${latitude},${longitude}z`);\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    {\n      this.#mapEvent = mapE;\n      form.classList.remove('hidden');\n      inputDistance.focus();\n    }\n  }\n\n  _hideForm() {\n    //Empty inputs\n    inputDistance.value =\n      inputCadence.value =\n      inputDuration.value =\n      inputElevation.value =\n        '';\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInput = (...inputs) => inputs.every(inp => Number.isFinite(inp));\n\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value; //在字符串前面加+号是把字符串转换成数字的意思\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n    // Check if data is valid\n\n    // If workout is running. create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInput(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive number!');\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout is cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !Number.isFinite(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive number!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n    // Add new object to workout array\n    this.#workouts.push(workout);\n    // console.log(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    //Hide form + clear input field\n    this._hideForm();\n\n    //Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxwidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴'} ${workout.description}`\n      )\n      .openPopup();\n  }\n  _renderWorkout(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n    <h2 class=\"workout__title\">${workout.description}</h2>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">${\n        workout.type === 'running' ? '🏃‍♂️' : '🚴'\n      }</span>\n      <span class=\"workout__value\">${workout.distance}</span>\n      <span class=\"workout__unit\">km</span>\n    </div>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">⏱</span>\n      <span class=\"workout__value\">24</span>\n      <span class=\"workout__unit\">min</span>\n    </div>`;\n\n    if (workout.type === 'running') {\n      html += `          \n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">⚡️</span>\n      <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n      <span class=\"workout__unit\">min/km</span>\n    </div>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">🦶🏼</span>\n      <span class=\"workout__value\">${workout.cadence}</span>\n      <span class=\"workout__unit\">spm</span>\n    </div>\n    </li>`;\n    }\n\n    if (workout.type === 'cycling') {\n      html += `\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⚡️</span>\n        <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n        <span class=\"workout__unit\">km/h</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⛰</span>\n        <span class=\"workout__value\">${workout.elevationGain}</span>\n        <span class=\"workout__unit\">m</span>\n      </div>\n  </li> \n      `;\n    }\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    console.log(workoutEl);\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n    // console.log(workout);\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: { duration: 1 },\n    });\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    // console.log(data);\n\n    if (!data) return;\n\n    this.#workouts = data;\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n      // this._renderWorkoutMarker(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":["Workout","date","Date","id","now","slice","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapZoomLevel","mapEvent","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","console","log","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","allPositive","inputs","every","inp","preventDefault","lat","lng","latlng","workout","Number","isFinite","validInput","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxwidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload","app"],"version":3,"file":"index.1c3e68e9.js.map"}