{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n// prettier-ignore\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  // clicks= 0;\n  constructor(coords, distance, duration) {\n    this.coords = coords;\n    this.distance = distance; //in km\n    this.duration = duration; // in min\n  }\n  _setDescription(){\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`\n  }\n\n  // click(){\n  //   this.clicks++;\n  // }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    //min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n  calcSpeed() {\n    //km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([50, 4], 5, 24, 100);\n// const cycling1 = new Cycling([50, 4], 27, 95, 520);\n// console.log(run1, cycling1);\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    //Get user's position\n    this._getPosition();\n\n    //Get data from local storage\n    this._getLocalStorage();\n\n    //Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    console.log(`https://www.google.be/maps/@${latitude},${longitude}z`);\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    {\n      this.#mapEvent = mapE;\n      form.classList.remove('hidden');\n      inputDistance.focus();\n    }\n  }\n\n  _hideForm() {\n    //Empty inputs\n    inputDistance.value =\n      inputCadence.value =\n      inputDuration.value =\n      inputElevation.value =\n        '';\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInput = (...inputs) => inputs.every(inp => Number.isFinite(inp));\n\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value; //在字符串前面加+号是把字符串转换成数字的意思\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n    // Check if data is valid\n\n    // If workout is running. create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInput(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive number!');\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout is cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !Number.isFinite(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive number!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n    // Add new object to workout array\n    this.#workouts.push(workout);\n    // console.log(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    //Hide form + clear input field\n    this._hideForm();\n\n    //Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxwidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴'} ${workout.description}`\n      )\n      .openPopup();\n  }\n  _renderWorkout(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n    <h2 class=\"workout__title\">${workout.description}</h2>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">${\n        workout.type === 'running' ? '🏃‍♂️' : '🚴'\n      }</span>\n      <span class=\"workout__value\">${workout.distance}</span>\n      <span class=\"workout__unit\">km</span>\n    </div>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">⏱</span>\n      <span class=\"workout__value\">24</span>\n      <span class=\"workout__unit\">min</span>\n    </div>`;\n\n    if (workout.type === 'running') {\n      html += `          \n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">⚡️</span>\n      <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n      <span class=\"workout__unit\">min/km</span>\n    </div>\n    <div class=\"workout__details\">\n      <span class=\"workout__icon\">🦶🏼</span>\n      <span class=\"workout__value\">${workout.cadence}</span>\n      <span class=\"workout__unit\">spm</span>\n    </div>\n    </li>`;\n    }\n\n    if (workout.type === 'cycling') {\n      html += `\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⚡️</span>\n        <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n        <span class=\"workout__unit\">km/h</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⛰</span>\n        <span class=\"workout__value\">${workout.elevationGain}</span>\n        <span class=\"workout__unit\">m</span>\n      </div>\n  </li> \n      `;\n    }\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    console.log(workoutEl);\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n    // console.log(workout);\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: { duration: 1 },\n    });\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    // console.log(data);\n\n    if (!data) return;\n\n    this.#workouts = data;\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n      // this._renderWorkoutMarker(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}